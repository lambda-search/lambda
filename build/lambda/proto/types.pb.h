// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lambda/proto/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lambda_2fproto_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lambda_2fproto_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lambda_2fproto_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lambda_2fproto_2ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lambda_2fproto_2ftypes_2eproto;
namespace lambda {
class FieldMeta;
struct FieldMetaDefaultTypeInternal;
extern FieldMetaDefaultTypeInternal _FieldMeta_default_instance_;
class IndexConf;
struct IndexConfDefaultTypeInternal;
extern IndexConfDefaultTypeInternal _IndexConf_default_instance_;
class IndexConf_FieldMetasEntry_DoNotUse;
struct IndexConf_FieldMetasEntry_DoNotUseDefaultTypeInternal;
extern IndexConf_FieldMetasEntry_DoNotUseDefaultTypeInternal _IndexConf_FieldMetasEntry_DoNotUse_default_instance_;
class IndexConf_OptionsEntry_DoNotUse;
struct IndexConf_OptionsEntry_DoNotUseDefaultTypeInternal;
extern IndexConf_OptionsEntry_DoNotUseDefaultTypeInternal _IndexConf_OptionsEntry_DoNotUse_default_instance_;
class IndexShardConf;
struct IndexShardConfDefaultTypeInternal;
extern IndexShardConfDefaultTypeInternal _IndexShardConf_default_instance_;
class SnapshotRule;
struct SnapshotRuleDefaultTypeInternal;
extern SnapshotRuleDefaultTypeInternal _SnapshotRule_default_instance_;
}  // namespace lambda
PROTOBUF_NAMESPACE_OPEN
template<> ::lambda::FieldMeta* Arena::CreateMaybeMessage<::lambda::FieldMeta>(Arena*);
template<> ::lambda::IndexConf* Arena::CreateMaybeMessage<::lambda::IndexConf>(Arena*);
template<> ::lambda::IndexConf_FieldMetasEntry_DoNotUse* Arena::CreateMaybeMessage<::lambda::IndexConf_FieldMetasEntry_DoNotUse>(Arena*);
template<> ::lambda::IndexConf_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::lambda::IndexConf_OptionsEntry_DoNotUse>(Arena*);
template<> ::lambda::IndexShardConf* Arena::CreateMaybeMessage<::lambda::IndexShardConf>(Arena*);
template<> ::lambda::SnapshotRule* Arena::CreateMaybeMessage<::lambda::SnapshotRule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lambda {

enum IndexMetricType : int {
  INDEX_METRIC_INNER_PRODUCT = 0,
  INDEX_METRIC_L2 = 1,
  INDEX_METRIC_COSINE = 2,
  INDEX_METRIC_HAMMING = 3
};
bool IndexMetricType_IsValid(int value);
constexpr IndexMetricType IndexMetricType_MIN = INDEX_METRIC_INNER_PRODUCT;
constexpr IndexMetricType IndexMetricType_MAX = INDEX_METRIC_HAMMING;
constexpr int IndexMetricType_ARRAYSIZE = IndexMetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexMetricType_descriptor();
template<typename T>
inline const std::string& IndexMetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexMetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexMetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexMetricType_descriptor(), enum_t_value);
}
inline bool IndexMetricType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IndexMetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexMetricType>(
    IndexMetricType_descriptor(), name, value);
}
enum IndexEngineType : int {
  ENGINE_FAISS_VECTOR = 0,
  ENGINE_FAISS_BINARY = 1,
  ENGINE_FAISS_RT = 2,
  ENGINE_HNSWLIB = 3,
  ENGINE_KDISK = 4,
  ENGINE_FAISS_VIRTUAL = 6
};
bool IndexEngineType_IsValid(int value);
constexpr IndexEngineType IndexEngineType_MIN = ENGINE_FAISS_VECTOR;
constexpr IndexEngineType IndexEngineType_MAX = ENGINE_FAISS_VIRTUAL;
constexpr int IndexEngineType_ARRAYSIZE = IndexEngineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexEngineType_descriptor();
template<typename T>
inline const std::string& IndexEngineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndexEngineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndexEngineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndexEngineType_descriptor(), enum_t_value);
}
inline bool IndexEngineType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IndexEngineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexEngineType>(
    IndexEngineType_descriptor(), name, value);
}
enum FieldType : int {
  TYPE_STRING = 0,
  TYPE_STRING_ARRAY = 1,
  TYPE_UINT64 = 2
};
bool FieldType_IsValid(int value);
constexpr FieldType FieldType_MIN = TYPE_STRING;
constexpr FieldType FieldType_MAX = TYPE_UINT64;
constexpr int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor();
template<typename T>
inline const std::string& FieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldType_descriptor(), enum_t_value);
}
inline bool FieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
// ===================================================================

class SnapshotRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lambda.SnapshotRule) */ {
 public:
  inline SnapshotRule() : SnapshotRule(nullptr) {}
  ~SnapshotRule() override;
  explicit constexpr SnapshotRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapshotRule(const SnapshotRule& from);
  SnapshotRule(SnapshotRule&& from) noexcept
    : SnapshotRule() {
    *this = ::std::move(from);
  }

  inline SnapshotRule& operator=(const SnapshotRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotRule& operator=(SnapshotRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapshotRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapshotRule* internal_default_instance() {
    return reinterpret_cast<const SnapshotRule*>(
               &_SnapshotRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnapshotRule& a, SnapshotRule& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapshotRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapshotRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapshotRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnapshotRule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lambda.SnapshotRule";
  }
  protected:
  explicit SnapshotRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodSecsFieldNumber = 1,
    kChangedDocsFieldNumber = 2,
  };
  // required int32 period_secs = 1;
  bool has_period_secs() const;
  private:
  bool _internal_has_period_secs() const;
  public:
  void clear_period_secs();
  int32_t period_secs() const;
  void set_period_secs(int32_t value);
  private:
  int32_t _internal_period_secs() const;
  void _internal_set_period_secs(int32_t value);
  public:

  // required int32 changed_docs = 2;
  bool has_changed_docs() const;
  private:
  bool _internal_has_changed_docs() const;
  public:
  void clear_changed_docs();
  int32_t changed_docs() const;
  void set_changed_docs(int32_t value);
  private:
  int32_t _internal_changed_docs() const;
  void _internal_set_changed_docs(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lambda.SnapshotRule)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t period_secs_;
  int32_t changed_docs_;
  friend struct ::TableStruct_lambda_2fproto_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class IndexConf_FieldMetasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexConf_FieldMetasEntry_DoNotUse, 
    std::string, ::lambda::FieldMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexConf_FieldMetasEntry_DoNotUse, 
    std::string, ::lambda::FieldMeta,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  IndexConf_FieldMetasEntry_DoNotUse();
  explicit constexpr IndexConf_FieldMetasEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit IndexConf_FieldMetasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IndexConf_FieldMetasEntry_DoNotUse& other);
  static const IndexConf_FieldMetasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IndexConf_FieldMetasEntry_DoNotUse*>(&_IndexConf_FieldMetasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lambda.IndexConf.FieldMetasEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class IndexConf_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexConf_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IndexConf_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  IndexConf_OptionsEntry_DoNotUse();
  explicit constexpr IndexConf_OptionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit IndexConf_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IndexConf_OptionsEntry_DoNotUse& other);
  static const IndexConf_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IndexConf_OptionsEntry_DoNotUse*>(&_IndexConf_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lambda.IndexConf.OptionsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lambda.IndexConf.OptionsEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class IndexConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lambda.IndexConf) */ {
 public:
  inline IndexConf() : IndexConf(nullptr) {}
  ~IndexConf() override;
  explicit constexpr IndexConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexConf(const IndexConf& from);
  IndexConf(IndexConf&& from) noexcept
    : IndexConf() {
    *this = ::std::move(from);
  }

  inline IndexConf& operator=(const IndexConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexConf& operator=(IndexConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexConf* internal_default_instance() {
    return reinterpret_cast<const IndexConf*>(
               &_IndexConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IndexConf& a, IndexConf& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IndexConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lambda.IndexConf";
  }
  protected:
  explicit IndexConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotRulesFieldNumber = 8,
    kFieldMetasFieldNumber = 20,
    kOptionsFieldNumber = 21,
    kDescriptionFieldNumber = 3,
    kModelCksmFieldNumber = 15,
    kGroupFieldNumber = 18,
    kNumberOfShardsFieldNumber = 1,
    kNumberOfReplicasFieldNumber = 2,
    kDimensionFieldNumber = 4,
    kMetricFieldNumber = 5,
    kNprobeFieldNumber = 6,
    kDirectMapFieldNumber = 10,
    kTmpfs4VectorFieldNumber = 13,
    kModelSizeFieldNumber = 14,
    kRebuildRateLimiterDocsPerSecFieldNumber = 16,
    kMemoryOfShardsFieldNumber = 17,
    kVersionFieldNumber = 19,
    kEngineFieldNumber = 12,
    kSlowlogLogSlowerThanFieldNumber = 11,
  };
  // repeated .lambda.SnapshotRule snapshot_rules = 8;
  int snapshot_rules_size() const;
  private:
  int _internal_snapshot_rules_size() const;
  public:
  void clear_snapshot_rules();
  ::lambda::SnapshotRule* mutable_snapshot_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lambda::SnapshotRule >*
      mutable_snapshot_rules();
  private:
  const ::lambda::SnapshotRule& _internal_snapshot_rules(int index) const;
  ::lambda::SnapshotRule* _internal_add_snapshot_rules();
  public:
  const ::lambda::SnapshotRule& snapshot_rules(int index) const;
  ::lambda::SnapshotRule* add_snapshot_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lambda::SnapshotRule >&
      snapshot_rules() const;

  // map<string, .lambda.FieldMeta> field_metas = 20;
  int field_metas_size() const;
  private:
  int _internal_field_metas_size() const;
  public:
  void clear_field_metas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >&
      _internal_field_metas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >*
      _internal_mutable_field_metas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >&
      field_metas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >*
      mutable_field_metas();

  // map<string, string> options = 21;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // required string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string model_cksm = 15;
  bool has_model_cksm() const;
  private:
  bool _internal_has_model_cksm() const;
  public:
  void clear_model_cksm();
  const std::string& model_cksm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_cksm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_cksm();
  PROTOBUF_NODISCARD std::string* release_model_cksm();
  void set_allocated_model_cksm(std::string* model_cksm);
  private:
  const std::string& _internal_model_cksm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_cksm(const std::string& value);
  std::string* _internal_mutable_model_cksm();
  public:

  // optional string group = 18;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const std::string& group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // required int32 number_of_shards = 1;
  bool has_number_of_shards() const;
  private:
  bool _internal_has_number_of_shards() const;
  public:
  void clear_number_of_shards();
  int32_t number_of_shards() const;
  void set_number_of_shards(int32_t value);
  private:
  int32_t _internal_number_of_shards() const;
  void _internal_set_number_of_shards(int32_t value);
  public:

  // required int32 number_of_replicas = 2;
  bool has_number_of_replicas() const;
  private:
  bool _internal_has_number_of_replicas() const;
  public:
  void clear_number_of_replicas();
  int32_t number_of_replicas() const;
  void set_number_of_replicas(int32_t value);
  private:
  int32_t _internal_number_of_replicas() const;
  void _internal_set_number_of_replicas(int32_t value);
  public:

  // required int32 dimension = 4;
  bool has_dimension() const;
  private:
  bool _internal_has_dimension() const;
  public:
  void clear_dimension();
  int32_t dimension() const;
  void set_dimension(int32_t value);
  private:
  int32_t _internal_dimension() const;
  void _internal_set_dimension(int32_t value);
  public:

  // required .lambda.IndexMetricType metric = 5;
  bool has_metric() const;
  private:
  bool _internal_has_metric() const;
  public:
  void clear_metric();
  ::lambda::IndexMetricType metric() const;
  void set_metric(::lambda::IndexMetricType value);
  private:
  ::lambda::IndexMetricType _internal_metric() const;
  void _internal_set_metric(::lambda::IndexMetricType value);
  public:

  // optional int32 nprobe = 6;
  bool has_nprobe() const;
  private:
  bool _internal_has_nprobe() const;
  public:
  void clear_nprobe();
  int32_t nprobe() const;
  void set_nprobe(int32_t value);
  private:
  int32_t _internal_nprobe() const;
  void _internal_set_nprobe(int32_t value);
  public:

  // optional bool direct_map = 10;
  bool has_direct_map() const;
  private:
  bool _internal_has_direct_map() const;
  public:
  void clear_direct_map();
  bool direct_map() const;
  void set_direct_map(bool value);
  private:
  bool _internal_direct_map() const;
  void _internal_set_direct_map(bool value);
  public:

  // optional bool tmpfs4vector = 13;
  bool has_tmpfs4vector() const;
  private:
  bool _internal_has_tmpfs4vector() const;
  public:
  void clear_tmpfs4vector();
  bool tmpfs4vector() const;
  void set_tmpfs4vector(bool value);
  private:
  bool _internal_tmpfs4vector() const;
  void _internal_set_tmpfs4vector(bool value);
  public:

  // optional int64 model_size = 14;
  bool has_model_size() const;
  private:
  bool _internal_has_model_size() const;
  public:
  void clear_model_size();
  int64_t model_size() const;
  void set_model_size(int64_t value);
  private:
  int64_t _internal_model_size() const;
  void _internal_set_model_size(int64_t value);
  public:

  // optional int64 rebuild_rate_limiter_docs_per_sec = 16;
  bool has_rebuild_rate_limiter_docs_per_sec() const;
  private:
  bool _internal_has_rebuild_rate_limiter_docs_per_sec() const;
  public:
  void clear_rebuild_rate_limiter_docs_per_sec();
  int64_t rebuild_rate_limiter_docs_per_sec() const;
  void set_rebuild_rate_limiter_docs_per_sec(int64_t value);
  private:
  int64_t _internal_rebuild_rate_limiter_docs_per_sec() const;
  void _internal_set_rebuild_rate_limiter_docs_per_sec(int64_t value);
  public:

  // optional int64 memory_of_shards = 17;
  bool has_memory_of_shards() const;
  private:
  bool _internal_has_memory_of_shards() const;
  public:
  void clear_memory_of_shards();
  int64_t memory_of_shards() const;
  void set_memory_of_shards(int64_t value);
  private:
  int64_t _internal_memory_of_shards() const;
  void _internal_set_memory_of_shards(int64_t value);
  public:

  // optional int64 version = 19;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional .lambda.IndexEngineType engine = 12 [default = ENGINE_FAISS_VECTOR];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::lambda::IndexEngineType engine() const;
  void set_engine(::lambda::IndexEngineType value);
  private:
  ::lambda::IndexEngineType _internal_engine() const;
  void _internal_set_engine(::lambda::IndexEngineType value);
  public:

  // optional int32 slowlog_log_slower_than = 11 [default = 1000];
  bool has_slowlog_log_slower_than() const;
  private:
  bool _internal_has_slowlog_log_slower_than() const;
  public:
  void clear_slowlog_log_slower_than();
  int32_t slowlog_log_slower_than() const;
  void set_slowlog_log_slower_than(int32_t value);
  private:
  int32_t _internal_slowlog_log_slower_than() const;
  void _internal_set_slowlog_log_slower_than(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lambda.IndexConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lambda::SnapshotRule > snapshot_rules_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      IndexConf_FieldMetasEntry_DoNotUse,
      std::string, ::lambda::FieldMeta,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> field_metas_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      IndexConf_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_cksm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  int32_t number_of_shards_;
  int32_t number_of_replicas_;
  int32_t dimension_;
  int metric_;
  int32_t nprobe_;
  bool direct_map_;
  bool tmpfs4vector_;
  int64_t model_size_;
  int64_t rebuild_rate_limiter_docs_per_sec_;
  int64_t memory_of_shards_;
  int64_t version_;
  int engine_;
  int32_t slowlog_log_slower_than_;
  friend struct ::TableStruct_lambda_2fproto_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class FieldMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lambda.FieldMeta) */ {
 public:
  inline FieldMeta() : FieldMeta(nullptr) {}
  ~FieldMeta() override;
  explicit constexpr FieldMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldMeta(const FieldMeta& from);
  FieldMeta(FieldMeta&& from) noexcept
    : FieldMeta() {
    *this = ::std::move(from);
  }

  inline FieldMeta& operator=(const FieldMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMeta& operator=(FieldMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldMeta* internal_default_instance() {
    return reinterpret_cast<const FieldMeta*>(
               &_FieldMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldMeta& a, FieldMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lambda.FieldMeta";
  }
  protected:
  explicit FieldMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldTypeFieldNumber = 1,
  };
  // optional .lambda.FieldType field_type = 1;
  bool has_field_type() const;
  private:
  bool _internal_has_field_type() const;
  public:
  void clear_field_type();
  ::lambda::FieldType field_type() const;
  void set_field_type(::lambda::FieldType value);
  private:
  ::lambda::FieldType _internal_field_type() const;
  void _internal_set_field_type(::lambda::FieldType value);
  public:

  // @@protoc_insertion_point(class_scope:lambda.FieldMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int field_type_;
  friend struct ::TableStruct_lambda_2fproto_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class IndexShardConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lambda.IndexShardConf) */ {
 public:
  inline IndexShardConf() : IndexShardConf(nullptr) {}
  ~IndexShardConf() override;
  explicit constexpr IndexShardConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexShardConf(const IndexShardConf& from);
  IndexShardConf(IndexShardConf&& from) noexcept
    : IndexShardConf() {
    *this = ::std::move(from);
  }

  inline IndexShardConf& operator=(const IndexShardConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexShardConf& operator=(IndexShardConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexShardConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexShardConf* internal_default_instance() {
    return reinterpret_cast<const IndexShardConf*>(
               &_IndexShardConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IndexShardConf& a, IndexShardConf& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexShardConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexShardConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexShardConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexShardConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexShardConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IndexShardConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexShardConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lambda.IndexShardConf";
  }
  protected:
  explicit IndexShardConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 4,
    kIndexFieldNumber = 1,
    kConfFieldNumber = 3,
    kShardIdxFieldNumber = 2,
  };
  // repeated string nodes = 4;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  const std::string& nodes(int index) const;
  std::string* mutable_nodes(int index);
  void set_nodes(int index, const std::string& value);
  void set_nodes(int index, std::string&& value);
  void set_nodes(int index, const char* value);
  void set_nodes(int index, const char* value, size_t size);
  std::string* add_nodes();
  void add_nodes(const std::string& value);
  void add_nodes(std::string&& value);
  void add_nodes(const char* value);
  void add_nodes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nodes();
  private:
  const std::string& _internal_nodes(int index) const;
  std::string* _internal_add_nodes();
  public:

  // required string index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // required .lambda.IndexConf conf = 3;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::lambda::IndexConf& conf() const;
  PROTOBUF_NODISCARD ::lambda::IndexConf* release_conf();
  ::lambda::IndexConf* mutable_conf();
  void set_allocated_conf(::lambda::IndexConf* conf);
  private:
  const ::lambda::IndexConf& _internal_conf() const;
  ::lambda::IndexConf* _internal_mutable_conf();
  public:
  void unsafe_arena_set_allocated_conf(
      ::lambda::IndexConf* conf);
  ::lambda::IndexConf* unsafe_arena_release_conf();

  // required int32 shard_idx = 2;
  bool has_shard_idx() const;
  private:
  bool _internal_has_shard_idx() const;
  public:
  void clear_shard_idx();
  int32_t shard_idx() const;
  void set_shard_idx(int32_t value);
  private:
  int32_t _internal_shard_idx() const;
  void _internal_set_shard_idx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lambda.IndexShardConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::lambda::IndexConf* conf_;
  int32_t shard_idx_;
  friend struct ::TableStruct_lambda_2fproto_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnapshotRule

// required int32 period_secs = 1;
inline bool SnapshotRule::_internal_has_period_secs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SnapshotRule::has_period_secs() const {
  return _internal_has_period_secs();
}
inline void SnapshotRule::clear_period_secs() {
  period_secs_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SnapshotRule::_internal_period_secs() const {
  return period_secs_;
}
inline int32_t SnapshotRule::period_secs() const {
  // @@protoc_insertion_point(field_get:lambda.SnapshotRule.period_secs)
  return _internal_period_secs();
}
inline void SnapshotRule::_internal_set_period_secs(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  period_secs_ = value;
}
inline void SnapshotRule::set_period_secs(int32_t value) {
  _internal_set_period_secs(value);
  // @@protoc_insertion_point(field_set:lambda.SnapshotRule.period_secs)
}

// required int32 changed_docs = 2;
inline bool SnapshotRule::_internal_has_changed_docs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SnapshotRule::has_changed_docs() const {
  return _internal_has_changed_docs();
}
inline void SnapshotRule::clear_changed_docs() {
  changed_docs_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SnapshotRule::_internal_changed_docs() const {
  return changed_docs_;
}
inline int32_t SnapshotRule::changed_docs() const {
  // @@protoc_insertion_point(field_get:lambda.SnapshotRule.changed_docs)
  return _internal_changed_docs();
}
inline void SnapshotRule::_internal_set_changed_docs(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  changed_docs_ = value;
}
inline void SnapshotRule::set_changed_docs(int32_t value) {
  _internal_set_changed_docs(value);
  // @@protoc_insertion_point(field_set:lambda.SnapshotRule.changed_docs)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IndexConf

// required int32 number_of_shards = 1;
inline bool IndexConf::_internal_has_number_of_shards() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IndexConf::has_number_of_shards() const {
  return _internal_has_number_of_shards();
}
inline void IndexConf::clear_number_of_shards() {
  number_of_shards_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t IndexConf::_internal_number_of_shards() const {
  return number_of_shards_;
}
inline int32_t IndexConf::number_of_shards() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.number_of_shards)
  return _internal_number_of_shards();
}
inline void IndexConf::_internal_set_number_of_shards(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  number_of_shards_ = value;
}
inline void IndexConf::set_number_of_shards(int32_t value) {
  _internal_set_number_of_shards(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.number_of_shards)
}

// required int32 number_of_replicas = 2;
inline bool IndexConf::_internal_has_number_of_replicas() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IndexConf::has_number_of_replicas() const {
  return _internal_has_number_of_replicas();
}
inline void IndexConf::clear_number_of_replicas() {
  number_of_replicas_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t IndexConf::_internal_number_of_replicas() const {
  return number_of_replicas_;
}
inline int32_t IndexConf::number_of_replicas() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.number_of_replicas)
  return _internal_number_of_replicas();
}
inline void IndexConf::_internal_set_number_of_replicas(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  number_of_replicas_ = value;
}
inline void IndexConf::set_number_of_replicas(int32_t value) {
  _internal_set_number_of_replicas(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.number_of_replicas)
}

// required string description = 3;
inline bool IndexConf::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IndexConf::has_description() const {
  return _internal_has_description();
}
inline void IndexConf::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IndexConf::description() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexConf::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lambda.IndexConf.description)
}
inline std::string* IndexConf::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:lambda.IndexConf.description)
  return _s;
}
inline const std::string& IndexConf::_internal_description() const {
  return description_.Get();
}
inline void IndexConf::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndexConf::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndexConf::release_description() {
  // @@protoc_insertion_point(field_release:lambda.IndexConf.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IndexConf::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lambda.IndexConf.description)
}

// required int32 dimension = 4;
inline bool IndexConf::_internal_has_dimension() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IndexConf::has_dimension() const {
  return _internal_has_dimension();
}
inline void IndexConf::clear_dimension() {
  dimension_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t IndexConf::_internal_dimension() const {
  return dimension_;
}
inline int32_t IndexConf::dimension() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.dimension)
  return _internal_dimension();
}
inline void IndexConf::_internal_set_dimension(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  dimension_ = value;
}
inline void IndexConf::set_dimension(int32_t value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.dimension)
}

// required .lambda.IndexMetricType metric = 5;
inline bool IndexConf::_internal_has_metric() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IndexConf::has_metric() const {
  return _internal_has_metric();
}
inline void IndexConf::clear_metric() {
  metric_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::lambda::IndexMetricType IndexConf::_internal_metric() const {
  return static_cast< ::lambda::IndexMetricType >(metric_);
}
inline ::lambda::IndexMetricType IndexConf::metric() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.metric)
  return _internal_metric();
}
inline void IndexConf::_internal_set_metric(::lambda::IndexMetricType value) {
  assert(::lambda::IndexMetricType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  metric_ = value;
}
inline void IndexConf::set_metric(::lambda::IndexMetricType value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.metric)
}

// optional int32 nprobe = 6;
inline bool IndexConf::_internal_has_nprobe() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IndexConf::has_nprobe() const {
  return _internal_has_nprobe();
}
inline void IndexConf::clear_nprobe() {
  nprobe_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t IndexConf::_internal_nprobe() const {
  return nprobe_;
}
inline int32_t IndexConf::nprobe() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.nprobe)
  return _internal_nprobe();
}
inline void IndexConf::_internal_set_nprobe(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  nprobe_ = value;
}
inline void IndexConf::set_nprobe(int32_t value) {
  _internal_set_nprobe(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.nprobe)
}

// repeated .lambda.SnapshotRule snapshot_rules = 8;
inline int IndexConf::_internal_snapshot_rules_size() const {
  return snapshot_rules_.size();
}
inline int IndexConf::snapshot_rules_size() const {
  return _internal_snapshot_rules_size();
}
inline void IndexConf::clear_snapshot_rules() {
  snapshot_rules_.Clear();
}
inline ::lambda::SnapshotRule* IndexConf::mutable_snapshot_rules(int index) {
  // @@protoc_insertion_point(field_mutable:lambda.IndexConf.snapshot_rules)
  return snapshot_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lambda::SnapshotRule >*
IndexConf::mutable_snapshot_rules() {
  // @@protoc_insertion_point(field_mutable_list:lambda.IndexConf.snapshot_rules)
  return &snapshot_rules_;
}
inline const ::lambda::SnapshotRule& IndexConf::_internal_snapshot_rules(int index) const {
  return snapshot_rules_.Get(index);
}
inline const ::lambda::SnapshotRule& IndexConf::snapshot_rules(int index) const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.snapshot_rules)
  return _internal_snapshot_rules(index);
}
inline ::lambda::SnapshotRule* IndexConf::_internal_add_snapshot_rules() {
  return snapshot_rules_.Add();
}
inline ::lambda::SnapshotRule* IndexConf::add_snapshot_rules() {
  ::lambda::SnapshotRule* _add = _internal_add_snapshot_rules();
  // @@protoc_insertion_point(field_add:lambda.IndexConf.snapshot_rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lambda::SnapshotRule >&
IndexConf::snapshot_rules() const {
  // @@protoc_insertion_point(field_list:lambda.IndexConf.snapshot_rules)
  return snapshot_rules_;
}

// optional bool direct_map = 10;
inline bool IndexConf::_internal_has_direct_map() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IndexConf::has_direct_map() const {
  return _internal_has_direct_map();
}
inline void IndexConf::clear_direct_map() {
  direct_map_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool IndexConf::_internal_direct_map() const {
  return direct_map_;
}
inline bool IndexConf::direct_map() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.direct_map)
  return _internal_direct_map();
}
inline void IndexConf::_internal_set_direct_map(bool value) {
  _has_bits_[0] |= 0x00000100u;
  direct_map_ = value;
}
inline void IndexConf::set_direct_map(bool value) {
  _internal_set_direct_map(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.direct_map)
}

// optional int32 slowlog_log_slower_than = 11 [default = 1000];
inline bool IndexConf::_internal_has_slowlog_log_slower_than() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool IndexConf::has_slowlog_log_slower_than() const {
  return _internal_has_slowlog_log_slower_than();
}
inline void IndexConf::clear_slowlog_log_slower_than() {
  slowlog_log_slower_than_ = 1000;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t IndexConf::_internal_slowlog_log_slower_than() const {
  return slowlog_log_slower_than_;
}
inline int32_t IndexConf::slowlog_log_slower_than() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.slowlog_log_slower_than)
  return _internal_slowlog_log_slower_than();
}
inline void IndexConf::_internal_set_slowlog_log_slower_than(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  slowlog_log_slower_than_ = value;
}
inline void IndexConf::set_slowlog_log_slower_than(int32_t value) {
  _internal_set_slowlog_log_slower_than(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.slowlog_log_slower_than)
}

// optional .lambda.IndexEngineType engine = 12 [default = ENGINE_FAISS_VECTOR];
inline bool IndexConf::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool IndexConf::has_engine() const {
  return _internal_has_engine();
}
inline void IndexConf::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::lambda::IndexEngineType IndexConf::_internal_engine() const {
  return static_cast< ::lambda::IndexEngineType >(engine_);
}
inline ::lambda::IndexEngineType IndexConf::engine() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.engine)
  return _internal_engine();
}
inline void IndexConf::_internal_set_engine(::lambda::IndexEngineType value) {
  assert(::lambda::IndexEngineType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  engine_ = value;
}
inline void IndexConf::set_engine(::lambda::IndexEngineType value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.engine)
}

// optional bool tmpfs4vector = 13;
inline bool IndexConf::_internal_has_tmpfs4vector() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IndexConf::has_tmpfs4vector() const {
  return _internal_has_tmpfs4vector();
}
inline void IndexConf::clear_tmpfs4vector() {
  tmpfs4vector_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool IndexConf::_internal_tmpfs4vector() const {
  return tmpfs4vector_;
}
inline bool IndexConf::tmpfs4vector() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.tmpfs4vector)
  return _internal_tmpfs4vector();
}
inline void IndexConf::_internal_set_tmpfs4vector(bool value) {
  _has_bits_[0] |= 0x00000200u;
  tmpfs4vector_ = value;
}
inline void IndexConf::set_tmpfs4vector(bool value) {
  _internal_set_tmpfs4vector(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.tmpfs4vector)
}

// optional int64 model_size = 14;
inline bool IndexConf::_internal_has_model_size() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool IndexConf::has_model_size() const {
  return _internal_has_model_size();
}
inline void IndexConf::clear_model_size() {
  model_size_ = int64_t{0};
  _has_bits_[0] &= ~0x00000400u;
}
inline int64_t IndexConf::_internal_model_size() const {
  return model_size_;
}
inline int64_t IndexConf::model_size() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.model_size)
  return _internal_model_size();
}
inline void IndexConf::_internal_set_model_size(int64_t value) {
  _has_bits_[0] |= 0x00000400u;
  model_size_ = value;
}
inline void IndexConf::set_model_size(int64_t value) {
  _internal_set_model_size(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.model_size)
}

// optional string model_cksm = 15;
inline bool IndexConf::_internal_has_model_cksm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IndexConf::has_model_cksm() const {
  return _internal_has_model_cksm();
}
inline void IndexConf::clear_model_cksm() {
  model_cksm_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IndexConf::model_cksm() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.model_cksm)
  return _internal_model_cksm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexConf::set_model_cksm(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 model_cksm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lambda.IndexConf.model_cksm)
}
inline std::string* IndexConf::mutable_model_cksm() {
  std::string* _s = _internal_mutable_model_cksm();
  // @@protoc_insertion_point(field_mutable:lambda.IndexConf.model_cksm)
  return _s;
}
inline const std::string& IndexConf::_internal_model_cksm() const {
  return model_cksm_.Get();
}
inline void IndexConf::_internal_set_model_cksm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_cksm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndexConf::_internal_mutable_model_cksm() {
  _has_bits_[0] |= 0x00000002u;
  return model_cksm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndexConf::release_model_cksm() {
  // @@protoc_insertion_point(field_release:lambda.IndexConf.model_cksm)
  if (!_internal_has_model_cksm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = model_cksm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_cksm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_cksm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IndexConf::set_allocated_model_cksm(std::string* model_cksm) {
  if (model_cksm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_cksm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_cksm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_cksm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_cksm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lambda.IndexConf.model_cksm)
}

// optional int64 rebuild_rate_limiter_docs_per_sec = 16;
inline bool IndexConf::_internal_has_rebuild_rate_limiter_docs_per_sec() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool IndexConf::has_rebuild_rate_limiter_docs_per_sec() const {
  return _internal_has_rebuild_rate_limiter_docs_per_sec();
}
inline void IndexConf::clear_rebuild_rate_limiter_docs_per_sec() {
  rebuild_rate_limiter_docs_per_sec_ = int64_t{0};
  _has_bits_[0] &= ~0x00000800u;
}
inline int64_t IndexConf::_internal_rebuild_rate_limiter_docs_per_sec() const {
  return rebuild_rate_limiter_docs_per_sec_;
}
inline int64_t IndexConf::rebuild_rate_limiter_docs_per_sec() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.rebuild_rate_limiter_docs_per_sec)
  return _internal_rebuild_rate_limiter_docs_per_sec();
}
inline void IndexConf::_internal_set_rebuild_rate_limiter_docs_per_sec(int64_t value) {
  _has_bits_[0] |= 0x00000800u;
  rebuild_rate_limiter_docs_per_sec_ = value;
}
inline void IndexConf::set_rebuild_rate_limiter_docs_per_sec(int64_t value) {
  _internal_set_rebuild_rate_limiter_docs_per_sec(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.rebuild_rate_limiter_docs_per_sec)
}

// optional int64 memory_of_shards = 17;
inline bool IndexConf::_internal_has_memory_of_shards() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool IndexConf::has_memory_of_shards() const {
  return _internal_has_memory_of_shards();
}
inline void IndexConf::clear_memory_of_shards() {
  memory_of_shards_ = int64_t{0};
  _has_bits_[0] &= ~0x00001000u;
}
inline int64_t IndexConf::_internal_memory_of_shards() const {
  return memory_of_shards_;
}
inline int64_t IndexConf::memory_of_shards() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.memory_of_shards)
  return _internal_memory_of_shards();
}
inline void IndexConf::_internal_set_memory_of_shards(int64_t value) {
  _has_bits_[0] |= 0x00001000u;
  memory_of_shards_ = value;
}
inline void IndexConf::set_memory_of_shards(int64_t value) {
  _internal_set_memory_of_shards(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.memory_of_shards)
}

// optional string group = 18;
inline bool IndexConf::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IndexConf::has_group() const {
  return _internal_has_group();
}
inline void IndexConf::clear_group() {
  group_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IndexConf::group() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.group)
  return _internal_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexConf::set_group(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lambda.IndexConf.group)
}
inline std::string* IndexConf::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:lambda.IndexConf.group)
  return _s;
}
inline const std::string& IndexConf::_internal_group() const {
  return group_.Get();
}
inline void IndexConf::_internal_set_group(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndexConf::_internal_mutable_group() {
  _has_bits_[0] |= 0x00000004u;
  return group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndexConf::release_group() {
  // @@protoc_insertion_point(field_release:lambda.IndexConf.group)
  if (!_internal_has_group()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = group_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IndexConf::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lambda.IndexConf.group)
}

// optional int64 version = 19;
inline bool IndexConf::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool IndexConf::has_version() const {
  return _internal_has_version();
}
inline void IndexConf::clear_version() {
  version_ = int64_t{0};
  _has_bits_[0] &= ~0x00002000u;
}
inline int64_t IndexConf::_internal_version() const {
  return version_;
}
inline int64_t IndexConf::version() const {
  // @@protoc_insertion_point(field_get:lambda.IndexConf.version)
  return _internal_version();
}
inline void IndexConf::_internal_set_version(int64_t value) {
  _has_bits_[0] |= 0x00002000u;
  version_ = value;
}
inline void IndexConf::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:lambda.IndexConf.version)
}

// map<string, .lambda.FieldMeta> field_metas = 20;
inline int IndexConf::_internal_field_metas_size() const {
  return field_metas_.size();
}
inline int IndexConf::field_metas_size() const {
  return _internal_field_metas_size();
}
inline void IndexConf::clear_field_metas() {
  field_metas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >&
IndexConf::_internal_field_metas() const {
  return field_metas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >&
IndexConf::field_metas() const {
  // @@protoc_insertion_point(field_map:lambda.IndexConf.field_metas)
  return _internal_field_metas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >*
IndexConf::_internal_mutable_field_metas() {
  return field_metas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lambda::FieldMeta >*
IndexConf::mutable_field_metas() {
  // @@protoc_insertion_point(field_mutable_map:lambda.IndexConf.field_metas)
  return _internal_mutable_field_metas();
}

// map<string, string> options = 21;
inline int IndexConf::_internal_options_size() const {
  return options_.size();
}
inline int IndexConf::options_size() const {
  return _internal_options_size();
}
inline void IndexConf::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
IndexConf::_internal_options() const {
  return options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
IndexConf::options() const {
  // @@protoc_insertion_point(field_map:lambda.IndexConf.options)
  return _internal_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
IndexConf::_internal_mutable_options() {
  return options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
IndexConf::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:lambda.IndexConf.options)
  return _internal_mutable_options();
}

// -------------------------------------------------------------------

// FieldMeta

// optional .lambda.FieldType field_type = 1;
inline bool FieldMeta::_internal_has_field_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FieldMeta::has_field_type() const {
  return _internal_has_field_type();
}
inline void FieldMeta::clear_field_type() {
  field_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::lambda::FieldType FieldMeta::_internal_field_type() const {
  return static_cast< ::lambda::FieldType >(field_type_);
}
inline ::lambda::FieldType FieldMeta::field_type() const {
  // @@protoc_insertion_point(field_get:lambda.FieldMeta.field_type)
  return _internal_field_type();
}
inline void FieldMeta::_internal_set_field_type(::lambda::FieldType value) {
  assert(::lambda::FieldType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  field_type_ = value;
}
inline void FieldMeta::set_field_type(::lambda::FieldType value) {
  _internal_set_field_type(value);
  // @@protoc_insertion_point(field_set:lambda.FieldMeta.field_type)
}

// -------------------------------------------------------------------

// IndexShardConf

// required string index = 1;
inline bool IndexShardConf::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IndexShardConf::has_index() const {
  return _internal_has_index();
}
inline void IndexShardConf::clear_index() {
  index_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IndexShardConf::index() const {
  // @@protoc_insertion_point(field_get:lambda.IndexShardConf.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IndexShardConf::set_index(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lambda.IndexShardConf.index)
}
inline std::string* IndexShardConf::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:lambda.IndexShardConf.index)
  return _s;
}
inline const std::string& IndexShardConf::_internal_index() const {
  return index_.Get();
}
inline void IndexShardConf::_internal_set_index(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IndexShardConf::_internal_mutable_index() {
  _has_bits_[0] |= 0x00000001u;
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IndexShardConf::release_index() {
  // @@protoc_insertion_point(field_release:lambda.IndexShardConf.index)
  if (!_internal_has_index()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = index_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IndexShardConf::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lambda.IndexShardConf.index)
}

// required int32 shard_idx = 2;
inline bool IndexShardConf::_internal_has_shard_idx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IndexShardConf::has_shard_idx() const {
  return _internal_has_shard_idx();
}
inline void IndexShardConf::clear_shard_idx() {
  shard_idx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t IndexShardConf::_internal_shard_idx() const {
  return shard_idx_;
}
inline int32_t IndexShardConf::shard_idx() const {
  // @@protoc_insertion_point(field_get:lambda.IndexShardConf.shard_idx)
  return _internal_shard_idx();
}
inline void IndexShardConf::_internal_set_shard_idx(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  shard_idx_ = value;
}
inline void IndexShardConf::set_shard_idx(int32_t value) {
  _internal_set_shard_idx(value);
  // @@protoc_insertion_point(field_set:lambda.IndexShardConf.shard_idx)
}

// required .lambda.IndexConf conf = 3;
inline bool IndexShardConf::_internal_has_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || conf_ != nullptr);
  return value;
}
inline bool IndexShardConf::has_conf() const {
  return _internal_has_conf();
}
inline void IndexShardConf::clear_conf() {
  if (conf_ != nullptr) conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::lambda::IndexConf& IndexShardConf::_internal_conf() const {
  const ::lambda::IndexConf* p = conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::lambda::IndexConf&>(
      ::lambda::_IndexConf_default_instance_);
}
inline const ::lambda::IndexConf& IndexShardConf::conf() const {
  // @@protoc_insertion_point(field_get:lambda.IndexShardConf.conf)
  return _internal_conf();
}
inline void IndexShardConf::unsafe_arena_set_allocated_conf(
    ::lambda::IndexConf* conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conf_);
  }
  conf_ = conf;
  if (conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lambda.IndexShardConf.conf)
}
inline ::lambda::IndexConf* IndexShardConf::release_conf() {
  _has_bits_[0] &= ~0x00000002u;
  ::lambda::IndexConf* temp = conf_;
  conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lambda::IndexConf* IndexShardConf::unsafe_arena_release_conf() {
  // @@protoc_insertion_point(field_release:lambda.IndexShardConf.conf)
  _has_bits_[0] &= ~0x00000002u;
  ::lambda::IndexConf* temp = conf_;
  conf_ = nullptr;
  return temp;
}
inline ::lambda::IndexConf* IndexShardConf::_internal_mutable_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::lambda::IndexConf>(GetArenaForAllocation());
    conf_ = p;
  }
  return conf_;
}
inline ::lambda::IndexConf* IndexShardConf::mutable_conf() {
  ::lambda::IndexConf* _msg = _internal_mutable_conf();
  // @@protoc_insertion_point(field_mutable:lambda.IndexShardConf.conf)
  return _msg;
}
inline void IndexShardConf::set_allocated_conf(::lambda::IndexConf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::lambda::IndexConf>::GetOwningArena(conf);
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:lambda.IndexShardConf.conf)
}

// repeated string nodes = 4;
inline int IndexShardConf::_internal_nodes_size() const {
  return nodes_.size();
}
inline int IndexShardConf::nodes_size() const {
  return _internal_nodes_size();
}
inline void IndexShardConf::clear_nodes() {
  nodes_.Clear();
}
inline std::string* IndexShardConf::add_nodes() {
  std::string* _s = _internal_add_nodes();
  // @@protoc_insertion_point(field_add_mutable:lambda.IndexShardConf.nodes)
  return _s;
}
inline const std::string& IndexShardConf::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const std::string& IndexShardConf::nodes(int index) const {
  // @@protoc_insertion_point(field_get:lambda.IndexShardConf.nodes)
  return _internal_nodes(index);
}
inline std::string* IndexShardConf::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:lambda.IndexShardConf.nodes)
  return nodes_.Mutable(index);
}
inline void IndexShardConf::set_nodes(int index, const std::string& value) {
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lambda.IndexShardConf.nodes)
}
inline void IndexShardConf::set_nodes(int index, std::string&& value) {
  nodes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lambda.IndexShardConf.nodes)
}
inline void IndexShardConf::set_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lambda.IndexShardConf.nodes)
}
inline void IndexShardConf::set_nodes(int index, const char* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lambda.IndexShardConf.nodes)
}
inline std::string* IndexShardConf::_internal_add_nodes() {
  return nodes_.Add();
}
inline void IndexShardConf::add_nodes(const std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lambda.IndexShardConf.nodes)
}
inline void IndexShardConf::add_nodes(std::string&& value) {
  nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lambda.IndexShardConf.nodes)
}
inline void IndexShardConf::add_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lambda.IndexShardConf.nodes)
}
inline void IndexShardConf::add_nodes(const char* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lambda.IndexShardConf.nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IndexShardConf::nodes() const {
  // @@protoc_insertion_point(field_list:lambda.IndexShardConf.nodes)
  return nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IndexShardConf::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:lambda.IndexShardConf.nodes)
  return &nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lambda

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lambda::IndexMetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lambda::IndexMetricType>() {
  return ::lambda::IndexMetricType_descriptor();
}
template <> struct is_proto_enum< ::lambda::IndexEngineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lambda::IndexEngineType>() {
  return ::lambda::IndexEngineType_descriptor();
}
template <> struct is_proto_enum< ::lambda::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lambda::FieldType>() {
  return ::lambda::FieldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lambda_2fproto_2ftypes_2eproto
